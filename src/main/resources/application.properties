## Threads
#spring.tomcat.threads.max=10s
### VirtualThreads
#spring.threads.virtual.enabled = true

# logs
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=ERROR

server.servlet.context-path=/template-service-java-springboot
spring.webflux.base-path=/template-service-java-springboot
server.port=8080

service.name=craft
service.module=web

# APIDocs
springdoc.api-docs.path=/api-docs
#springdoc.api-docs.enabled=true
#springdoc.swagger-ui.enabled=true
#springdoc.show-actuator=true
#springdoc.packagesToScan=com.shubham

## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url=jdbc:mysql://localhost:3306/template-service-java-springboot?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&autoReconnect=true&allowPublicKeyRetrieval=true&createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=root1234
## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=update
spring.datasource.hikari.conserversenteventsnectionTimeout=30000
spring.datasource.hikari.idleTimeout=600000
spring.datasource.hikari.maxLifetime=1800000

# flyway migration
spring.flyway.baseline-on-migrate=true
spring.flyway.enabled=true
spring.flyway.baseline-version=1.1
spring.flyway.locations=classpath:/db/migration
spring.flyway.out-of-order=false

# Kafka
spring.kafka.bootstrap-servers=localhost:29092
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.listener.ack-mode=MANUAL_IMMEDIATE
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.producer.properties.acks=all
kafka.group.id=template-service-java-springboot
kafka.topic.name=template-service-java-springboot

# AWS
aws.default.region=ap-south-1
## S3
bucket.name=template-service-java-springboot-documents

# Metrics/Actuator
management.endpoints.web.exposure.include=health,prometheus
management.endpoint.health.show-details=always
management.health.probes.enabled=true
management.metrics.tags.application=${spring.application.name}

# Sentry
sentry.dsn=https://e5f2aafaa9b3bb17906f4d0eb123b3f0@o4505834144399360.ingest.sentry.io/4505834146889728
# Set traces-sample-rate to 1.0 to capture 100% of transactions for performance monitoring.
# We recommend adjusting this value in production.
sentry.traces-sample-rate=1.0

# Security
security.basic.enabled=false
management.security.enabled=false

# OAuth2
spring.security.oauth2.client.registration.google.scope: openid,profile,email
spring.security.oauth2.resourceserver.jwt.issuer-uri: https://accounts.google.com
spring.security.oauth2.resourceserver.jwt.jwk-set-uri: https://www.googleapis.com/oauth2/v3/certs
spring.security.oauth2.client.registration.google.client-id: 809236032393-ms8jl2qt0v6uu0gakv0339ekoq5iva26.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret: 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

## Keycloak
#spring.security.oauth2.client.registration.template-service-spring-boot.client-id=template-service-spring-boot
#spring.security.oauth2.client.registration.template-service-spring-boot.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.template-service-spring-boot.scope=openid, profile, roles
#spring.security.oauth2.client.provider.template-service-spring-boot.issuer-uri=http://localhost:8180/realms/template-service-spring-boot
#spring.security.oauth2.client.provider.template-service-spring-boot.user-name-attribute=test
#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8180/realms/template-service-spring-boot
#spring.security.oauth2.client.registration.template-service-spring-boot.client-secret=ABgvt5rZ96furvxhTWTQPPXWh03l4ymF
#spring.security.oauth2.client.registration.template-service-spring-boot.redirect-uri=http://localhost:8080/login/oauth2/code/template-service-spring-boot